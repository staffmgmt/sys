# filename: newp/browser_use/controller/views.py
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field, model_validator


# --- Browser Interaction Action Parameter Models ---

class SearchGoogleAction(BaseModel):
	"""Parameters for searching Google."""
	query: str = Field(..., description="The search query string.")

class GoToUrlAction(BaseModel):
	"""Parameters for navigating to a URL."""
	url: str = Field(..., description="The URL to navigate to.")

class ClickElementAction(BaseModel):
	"""Parameters for clicking an element by its index."""
	index: int = Field(..., description="The numerical index of the element to click.")
	xpath: Optional[str] = Field(None, description="Optional XPath of the element for verification or specific targeting.") # Retained from original

class InputTextAction(BaseModel):
	"""Parameters for inputting text into an element."""
	index: int = Field(..., description="The numerical index of the input element.")
	text: str = Field(..., description="The text to input into the element.")
	xpath: Optional[str] = Field(None, description="Optional XPath of the element for verification.") # Retained from original

class DoneAction(BaseModel):
	"""Parameters for signaling task completion."""
	text: Optional[str] = Field(None, description="A comprehensive final answer, summary of the outcome, or reason for concluding the task.")
	success: bool = Field(..., description="A boolean indicating if the overall task objectives were successfully met.")

class SwitchTabAction(BaseModel):
	"""Parameters for switching to a different browser tab."""
	page_id: int = Field(..., description="The ID of the tab to switch to.")

class OpenTabAction(BaseModel):
	"""Parameters for opening a new browser tab with a URL."""
	url: str = Field(..., description="The URL to open in the new tab.")

class CloseTabAction(BaseModel):
	"""Parameters for closing an existing browser tab."""
	page_id: int = Field(..., description="The ID of the tab to close.")

# This new model replaces the old ScrollAction
class ScrollActionWithDirection(BaseModel):
	"""Parameters for scrolling the page."""
	direction: str = Field(..., description="Direction to scroll: 'up', 'down', 'top', or 'bottom'.")
	amount: Optional[int] = Field(None, description="Pixel amount for 'up'/'down' scrolling. If None for up/down, scrolls by one viewport height.")

class SendKeysAction(BaseModel):
	"""Parameters for sending special key presses or combinations."""
	keys: str = Field(..., description="The key(s) to press (e.g., 'Enter', 'Control+A', 'PageDown').")

class GroupTabsAction(BaseModel): # Retained from original file
	"""Parameters for grouping browser tabs."""
	tab_ids: List[int] = Field(..., description='List of tab IDs to group.')
	title: str = Field(..., description='Name for the tab group.')
	color: Optional[str] = Field('blue', description='Color for the group (grey/blue/red/yellow/green/pink/purple/cyan).')

class UngroupTabsAction(BaseModel): # Retained from original file
	"""Parameters for ungrouping browser tabs."""
	tab_ids: List[int] = Field(..., description='List of tab IDs to ungroup.')

class ExtractContentActionParams(BaseModel):
	"""Parameters for extracting content from a page."""
	goal: str = Field(..., description="The specific goal or question to guide content extraction.")
	should_strip_link_urls: bool = Field(True, description="Whether to remove link URLs from the extracted text.")

class ScrollToTextActionParams(BaseModel):
	"""Parameters for scrolling to specific text on a page."""
	text: str = Field(..., description="The text to scroll to make visible.")

class GetDropdownOptionsActionParams(BaseModel):
	"""Parameters for getting options from a dropdown element."""
	index: int = Field(..., description="The numerical index of the dropdown (<select>) element.")

class SelectDropdownOptionActionParams(BaseModel):
	"""Parameters for selecting an option in a dropdown element."""
	index: int = Field(..., description="The numerical index of the dropdown (<select>) element.")
	text: str = Field(..., description="The visible text of the option to select.")

class WaitActionParams(BaseModel):
	"""Parameters for pausing execution."""
	seconds: int = Field(default=3, ge=0, le=300, description="Number of seconds to wait (0-300).") # Added reasonable max

class NoParamsAction(BaseModel):
	"""
	Represents an action that requires no parameters.
	Accepts any incoming data during parsing but results in an empty model.
	"""
	model_config = ConfigDict(extra='allow')

	@model_validator(mode='before')
	@classmethod
	def ignore_all_inputs(cls, values: Any) -> Dict[str, Any]:
		# No matter what is sent, discard it and return an empty dictionary.
		return {}

SavePdfActionParams = NoParamsAction # save_pdf action generates its own filename

class Position(BaseModel): # Retained from original file (for DragDropAction)
	"""Represents an X, Y coordinate."""
	x: int
	y: int

class DragDropAction(BaseModel): # Retained from original file
	"""Parameters for performing a drag-and-drop operation."""
	element_source: Optional[str] = Field(None, description='CSS selector or XPath of the element to drag from.')
	element_target: Optional[str] = Field(None, description='CSS selector or XPath of the element to drop onto.')
	element_source_offset: Optional[Position] = Field(None, description='Precise position (offset from top-left) within the source element to start drag.')
	element_target_offset: Optional[Position] = Field(None, description='Precise position (offset from top-left) within the target element to drop.')

	coord_source_x: Optional[int] = Field(None, description='Absolute X coordinate on page to start drag from.')
	coord_source_y: Optional[int] = Field(None, description='Absolute Y coordinate on page to start drag from.')
	coord_target_x: Optional[int] = Field(None, description='Absolute X coordinate on page to drop at.')
	coord_target_y: Optional[int] = Field(None, description='Absolute Y coordinate on page to drop at.')

	steps: Optional[int] = Field(10, description='Number of intermediate points for smoother movement (e.g., 5-20).')
	delay_ms: Optional[int] = Field(5, description='Delay in milliseconds between steps (e.g., 0-20).')


# --- Parameter Models for Local PC Tools ---
# These were previously in agent/views.py, moved here for controller coherence.

class FileParameters(BaseModel):
    """Parameters for writing or appending to a file in the agent's workspace."""
    filename: str = Field(..., description="The name of the file (e.g., 'notes.txt'). Path is relative to Agent_Dir.")
    content: str = Field(..., description="The text content to write or append to the file.")
    append: bool = Field(False, description="If True, appends to the file; otherwise, overwrites or creates.")

class ReadFileParameters(BaseModel):
    """Parameters for reading a file from the agent's workspace."""
    filename: str = Field(..., description="The name of the file to read (e.g., 'document.txt'). Path is relative to Agent_Dir.")

class ExcelParameters(BaseModel):
    """Parameters for reading or writing an Excel file in the agent's workspace."""
    filename: str = Field(..., description="The name of the Excel file (e.g., 'spreadsheet.xlsx'). Path relative to Agent_Dir.")
    data: Optional[List[Dict[str, Any]]] = Field(None, description="For writing: A list of dictionaries, where each dict is a row. Required for 'write_excel_file'.")
    sheet_name: Optional[Union[str, int]] = Field(0, description="Sheet name (str) or index (int, 0-based) to read/write. Defaults to first sheet.")

class LaunchNotepadParameters(BaseModel):
    """Parameters for launching Notepad (Windows only)."""
    filename: Optional[str] = Field(None, description="Optional: Name of a text file in Agent_Dir to open with Notepad.")